
# importing required librarys
import pygame
import chess
import chess.polyglot
import math
import os
import time
from copy import deepcopy
#initialise display
X = 800
Y = 800
scrn = pygame.display.set_mode((X, Y))
pygame.init()

#basic colours
WHITE = (255, 255, 255)
GREY = (128, 128, 128)
YELLOW = (204, 204, 0)
BLUE = (50, 255, 255)
BLACK = (0, 0, 0)

#initialise chess board
b = chess.Board()


#load piece images
pieces = {'p': pygame.image.load('pb.jpg').convert(),
          'n': pygame.image.load('nb.png').convert(),
          'b': pygame.image.load('bb.png').convert(),
          'r': pygame.image.load('rb.png').convert(),
          'q': pygame.image.load('qb.png').convert(),
          'k': pygame.image.load('kd.png').convert(),
          'P': pygame.image.load('pw.png').convert(),
          'N': pygame.image.load('nw.png').convert(),
          'B': pygame.image.load('bw.png').convert(),
          'R': pygame.image.load('rw.png').convert(),
          'Q': pygame.image.load('qw.png').convert(),
          'K': pygame.image.load('kw.png').convert(),
          
          }

def update(scrn,board): # updates the screen basis the board class
    
    for i in range(64):
        piece = board.piece_at(i)
        if piece == None:
            pass
        else:
            scrn.blit(pieces[str(piece)],((i%8)*100,700-(i//8)*100))
    
    for i in range(7):
        i=i+1
        pygame.draw.line(scrn,WHITE,(0,i*100),(800,i*100))
        pygame.draw.line(scrn,WHITE,(i*100,0),(i*100,800))

    pygame.display.flip()


import random
def random_agent(BOARD):
    return random.choice(list(BOARD.legal_moves))

scoring= {'p': -1,
          'n': -3,
          'b': -3,
          'r': -5,
          'q': -9,
          'k': 0,
          'P': 1,
          'N': 3,
          'B': 3,
          'R': 5,
          'Q': 9,
          'K': 0,
          }
#simple evaluation function
def eval_board(BOARD):
    score = 0
    pieces = BOARD.piece_map()
    for key in pieces:
        score += scoring[str(pieces[key])]

    return score

#opening book
reader = chess.polyglot.open_reader('baron30.bin')

def min_maxN(BOARD, N, alpha, beta):
    opening_move = reader.get(BOARD)
    if opening_move == None:
        pass
    else:
        return eval_board(BOARD),opening_move.move

    # check if the current node is a leaf node or if we have reached the maximum depth
    if N == 0 or BOARD.is_game_over():
        return eval_board(BOARD), None
    
    # get legal moves for the current player
    moves = list(BOARD.legal_moves)
    
    # initialize best move to None
    best_move = None

    
    # if it's the maximizing player's turn
    if BOARD.turn == chess.WHITE:
        best_score = -math.inf
        
        # loop through each legal move and get its score
        for move in moves:
            temp = deepcopy(BOARD)
            temp.push(move)
            
            # recursive call to get the score for this move
            score, _ = min_maxN(temp, N-1, alpha, beta)
                    
            # update the best score if this move has a better score
            if score > best_score:
                best_score = score
                best_move = move
            
            # update alpha value
            alpha = max(alpha, best_score)
            
            # if beta <= alpha, we can prune the rest of the moves
            if beta <= alpha:
                break
    
    # if it's the minimizing player's turn
    else:
        best_score = math.inf
        
        # loop through each legal move and get its score
        for move in moves:
            temp = deepcopy(BOARD)
            temp.push(move)
            
            # recursive call to get the score for this move
            score, _ = min_maxN(temp, N-1, alpha, beta)
            
            # update the best score if this move has a better score
            if score < best_score:
                best_score = score
                best_move = move
            
            # update beta value
            beta = min(beta, best_score)
            
            # if beta <= alpha, we can prune the rest of the moves
            if beta <= alpha:
                break
    
    return best_score,best_move

def min_max3(BOARD):
    return min_maxN(BOARD,3,-math.inf,math.inf)

def min_max4(BOARD):
    return min_maxN(BOARD,4,-math.inf,math.inf)

def main(BOARD,agent,agent_color):
    
    '''
    for agent vs human game
    color is True = White agent
    color is False = Black agent
    '''
    
    #make background black
    scrn.fill(BLACK)
    #name window
    pygame.display.set_caption('Chess')
    
    #variable to be used later
    index_moves = []

    status = True
    while (status):
        #update screen
        update(scrn,BOARD)
        
     
        if BOARD.turn==agent_color:
            _,agentmove=agent(BOARD)
            BOARD.push(agentmove)
            scrn.fill(BLACK)
            
        else:

            for event in pygame.event.get():
         
                if event.type == pygame.QUIT:
                    status = False

                # if mouse clicked
                if event.type == pygame.MOUSEBUTTONDOWN:
                    #reset previous screen from clicks
                    scrn.fill(BLACK)
                    #get position of mouse
                    pos = pygame.mouse.get_pos()

                    #find which square was clicked and index of it
                    square = (math.floor(pos[0]/100),math.floor(pos[1]/100))
                    index = (7-square[1])*8+(square[0])
                    
                    # if we have already highlighted moves and are making a move
                    if index in index_moves: 
                        
                        move = moves[index_moves.index(index)]
                        #print(BOARD)
                        #print(move)
                        BOARD.push(move)
                        index=None
                        index_moves = []
                        
                    # show possible moves
                    else:
                        
                        piece = BOARD.piece_at(index)
                        
                        if piece == None:
                            
                            pass
                        else:

                            all_moves = list(BOARD.legal_moves)
                            moves = []
                            for m in all_moves:
                                if m.from_square == index:
                                    
                                    moves.append(m)

                                    t = m.to_square

                                    TX1 = 100*(t%8)
                                    TY1 = 100*(7-t//8)

                                    
                                    pygame.draw.rect(scrn,BLUE,pygame.Rect(TX1,TY1,100,100),5)
                            #print(moves)
                            index_moves = [a.to_square for a in moves]
     
    # deactivates the pygame library
        if BOARD.outcome() != None:
            print(BOARD.outcome())
            update(scrn,BOARD)
            status = False
            time.sleep(3)
            print(BOARD)
    pygame.quit()


if __name__=="__main__":
  main(b,min_max3,False)

